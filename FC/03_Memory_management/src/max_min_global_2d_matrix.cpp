/*
 * Developed by: 
 *     - David Padilla Orenga, NIA: 946874
 *     - Inacio Pastore Benaim, NIP: 920576
 *     - Alisson Zapatier Troya, NIP: 717171
 * 
 * EXPLANATION:
 *      - The matrix is stored in the data (global/static data section). Since it's a statically allocated array,the size of the matrix is fixed at
 *        compile time, and the memory is allocated automatically when the program starts. This means the matrix will exist for the lifetime of the program.
 *        Since he matrix is statically allocated in the data section, it will not be necessary to manually free the memory.
 * 
 *      - We are accessing this global variable in the data through a pointer (float* ptr_matrix = &matrix[0][0]) where ptr_matrix is pointing to the first
 *        element. In C++, a 2D array is stored in a contiguous block of memory, treating it as a 1D array via. This means float* allows us to traverse the
 *        entire matrix linearly.
 * 
 *  */

#include <iostream>
#include <random>


// Declaration of the matrix in DATA
const size_t n = 4;
float matrix[n][n];


int main() {

    std::random_device rd; // This is a random number generator that produces non-deterministic random numbers. Each time the programm runs it will generate a new random seed. (Each running wold give us different numbers)
    std::mt19937 gen(rd()); // A pseudo-random number generator with a seed generated from rd(), ensuring that the random numbers generated by gen would be different each time the program runs.
    std::uniform_real_distribution<float> dis {0.0f, 1.0f}; // This line creates a uniform real distribution object which will generate floating-point numbers in the range [0.0, 1.0).

    // auto pseudo_random_float_value = dis(gen); (Auto --> Float) This generates a random floating-point number between 0.0 and 1.0 using the gen generator and the uniform distribution dis.

    float* ptr_matrix = &matrix[0][0]; // Pointer have to point to he first element of the matrix
    float min_value = std::numeric_limits<float>::max(); // Largest possible float
    float max_value = std::numeric_limits<float>::lowest();  // Lowest possible float

    std::cout << "Used matrix is:" << std::endl << std::endl;

    for(size_t element = 0; element < (n*n); element++){

        ptr_matrix[element] = dis(gen);  
        std::cout << ptr_matrix[element] << ' ';

        // Checking min/max
        if (ptr_matrix[element] < min_value) min_value = ptr_matrix[element];
        if (ptr_matrix[element] > max_value) max_value = ptr_matrix[element];

        // Print new line after each row (4 elements)
        if ((element + 1) % 4 == 0) std::cout << std::endl;
    }

    std::cout << std::endl << "The maximum and minimun values of the matrix are: " << max_value << " and " << min_value << std::endl; 
}


